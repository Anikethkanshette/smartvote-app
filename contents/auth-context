"use client"

import type React from "react"
import { createContext, useContext, useEffect, useState } from "react"
import { getUserById, authenticateUser, type User } from "@/lib/local-storage"

interface AuthContextType {
  user: User | null
  userData: User | null
  loading: boolean
  login: (username: string, password: string) => Promise<boolean>
  logout: () => Promise<void>
  refreshUserData: () => Promise<void>
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  userData: null,
  loading: true,
  login: async () => false,
  logout: async () => {},
  refreshUserData: async () => {},
})

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(true)

  const refreshUserData = async () => {
    const currentUserId = localStorage.getItem("currentUser")
    if (currentUserId) {
      const userData = getUserById(currentUserId)
      setUser(userData)
    }
  }

  useEffect(() => {
    const initAuth = async () => {
      setLoading(true)
      await refreshUserData()
      setLoading(false)
    }

    initAuth()
  }, [])

  const login = async (username: string, password: string): Promise<boolean> => {
    const authenticatedUser = authenticateUser(username, password)
    if (authenticatedUser) {
      setUser(authenticatedUser)
      localStorage.setItem("currentUser", authenticatedUser.uid)
      return true
    }
    return false
  }

  const logout = async () => {
    setUser(null)
    localStorage.removeItem("currentUser")
  }

  return (
    <AuthContext.Provider
      value={{
        user,
        userData: user,
        loading,
        login,
        logout,
        refreshUserData,
      }}
    >
      {children}
    </AuthContext.Provider>
  )
}

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider")
  }
  return context
}
