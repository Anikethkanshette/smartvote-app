"use client"

import { useState, useEffect } from "react"
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { ArrowLeft, Trophy, Users, RefreshCw } from "lucide-react"

const initialResults = {
  totalVotes: 1247,
  positions: [
    {
      title: "President",
      candidates: [
        { id: "p1", name: "Sarah Johnson", votes: 456, percentage: 36.6, image: "/placeholder.svg?height=60&width=60" },
        { id: "p2", name: "Michael Chen", votes: 398, percentage: 31.9, image: "/placeholder.svg?height=60&width=60" },
        { id: "p3", name: "Alex Thompson", votes: 234, percentage: 18.8, image: "/placeholder.svg?height=60&width=60" },
        { id: "p4", name: "Jessica Park", votes: 159, percentage: 12.7, image: "/placeholder.svg?height=60&width=60" },
      ],
    },
    {
      title: "Vice President",
      candidates: [
        {
          id: "vp1",
          name: "Emily Rodriguez",
          votes: 523,
          percentage: 41.9,
          image: "/placeholder.svg?height=60&width=60",
        },
        { id: "vp2", name: "James Wilson", votes: 412, percentage: 33.0, image: "/placeholder.svg?height=60&width=60" },
        { id: "vp3", name: "Lisa Chang", votes: 312, percentage: 25.1, image: "/placeholder.svg?height=60&width=60" },
      ],
    },
    {
      title: "Secretary",
      candidates: [
        { id: "s1", name: "David Kim", votes: 298, percentage: 23.9, image: "/placeholder.svg?height=60&width=60" },
        { id: "s2", name: "Maria Garcia", votes: 276, percentage: 22.1, image: "/placeholder.svg?height=60&width=60" },
        { id: "s3", name: "Ryan O'Connor", votes: 254, percentage: 20.4, image: "/placeholder.svg?height=60&width=60" },
        { id: "s4", name: "Priya Patel", votes: 223, percentage: 17.9, image: "/placeholder.svg?height=60&width=60" },
        { id: "s5", name: "Tom Anderson", votes: 196, percentage: 15.7, image: "/placeholder.svg?height=60&width=60" },
      ],
    },
    {
      title: "Treasurer",
      candidates: [
        { id: "t1", name: "Kevin Lee", votes: 687, percentage: 55.1, image: "/placeholder.svg?height=60&width=60" },
        { id: "t2", name: "Amanda Foster", votes: 560, percentage: 44.9, image: "/placeholder.svg?height=60&width=60" },
      ],
    },
  ],
}

export default function ResultsPage() {
  const [results, setResults] = useState(initialResults)
  const [lastUpdated, setLastUpdated] = useState(new Date())
  const [isRefreshing, setIsRefreshing] = useState(false)

  const refreshResults = async () => {
    setIsRefreshing(true)
    // Simulate API call with slight vote changes
    await new Promise((resolve) => setTimeout(resolve, 1000))

    const updatedResults = {
      ...results,
      totalVotes: results.totalVotes + Math.floor(Math.random() * 10),
      positions: results.positions.map((position) => ({
        ...position,
        candidates: position.candidates.map((candidate) => {
          const voteChange = Math.floor(Math.random() * 5) - 2
          const newVotes = Math.max(0, candidate.votes + voteChange)
          return {
            ...candidate,
            votes: newVotes,
          }
        }),
      })),
    }

    // Recalculate percentages
    updatedResults.positions = updatedResults.positions.map((position) => {
      const totalPositionVotes = position.candidates.reduce((sum, c) => sum + c.votes, 0)
      return {
        ...position,
        candidates: position.candidates
          .map((candidate) => ({
            ...candidate,
            percentage: totalPositionVotes > 0 ? (candidate.votes / totalPositionVotes) * 100 : 0,
          }))
          .sort((a, b) => b.votes - a.votes),
      }
    })

    setResults(updatedResults)
    setLastUpdated(new Date())
    setIsRefreshing(false)
  }

  useEffect(() => {
    const interval = setInterval(refreshResults, 30000) // Auto-refresh every 30 seconds
    return () => clearInterval(interval)
  }, [])

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <Link href="/" className="flex items-center space-x-2">
              <ArrowLeft className="h-5 w-5" />
              <span>Back to Home</span>
            </Link>
            <h1 className="text-2xl font-bold text-gray-900">Live Results</h1>
            <Button onClick={refreshResults} disabled={isRefreshing} variant="outline">
              <RefreshCw className={`h-4 w-4 mr-2 ${isRefreshing ? "animate-spin" : ""}`} />
              Refresh
            </Button>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Stats Overview */}
        <div className="grid md:grid-cols-3 gap-6 mb-8">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Votes Cast</CardTitle>
              <Users className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{results.totalVotes.toLocaleString()}</div>
              <p className="text-xs text-muted-foreground">Last updated: {lastUpdated.toLocaleTimeString()}</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Voter Turnout</CardTitle>
              <Trophy className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">57.2%</div>
              <p className="text-xs text-muted-foreground">{results.totalVotes} of 2,180 registered voters</p>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Election Status</CardTitle>
              <Badge className="bg-green-100 text-green-800">Live</Badge>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">Active</div>
              <p className="text-xs text-muted-foreground">Voting ends in 6 hours</p>
            </CardContent>
          </Card>
        </div>

        {/* Results by Position */}
        <div className="space-y-8">
          {results.positions.map((position) => (
            <Card key={position.title}>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Trophy className="mr-2 h-5 w-5 text-yellow-600" />
                  {position.title}
                </CardTitle>
                <CardDescription>
                  Current standings based on {results.totalVotes.toLocaleString()} votes
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {position.candidates.map((candidate, index) => (
                    <div key={candidate.id} className="flex items-center space-x-4 p-4 rounded-lg border">
                      <div className="flex items-center space-x-3">
                        <div
                          className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                            index === 0
                              ? "bg-yellow-100 text-yellow-800"
                              : index === 1
                                ? "bg-gray-100 text-gray-800"
                                : index === 2
                                  ? "bg-orange-100 text-orange-800"
                                  : "bg-gray-50 text-gray-600"
                          }`}
                        >
                          {index + 1}
                        </div>
                        <Avatar className="h-12 w-12">
                          <AvatarImage src={candidate.image || "/placeholder.svg"} alt={candidate.name} />
                          <AvatarFallback>
                            {candidate.name
                              .split(" ")
                              .map((n) => n[0])
                              .join("")}
                          </AvatarFallback>
                        </Avatar>
                        <div>
                          <div className="font-medium">{candidate.name}</div>
                          <div className="text-sm text-gray-600">
                            {candidate.votes.toLocaleString()} votes ({candidate.percentage.toFixed(1)}%)
                          </div>
                        </div>
                      </div>
                      <div className="flex-1 ml-4">
                        <Progress value={candidate.percentage} className="h-3" />
                      </div>
                      {index === 0 && <Badge className="bg-yellow-100 text-yellow-800">Leading</Badge>}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        <div className="mt-8 text-center">
          <Card className="p-6">
            <h3 className="text-lg font-semibold mb-2">Results are Live!</h3>
            <p className="text-gray-600 mb-4">
              These results are updated in real-time as votes are cast. Final results will be announced after voting
              closes.
            </p>
            <div className="flex justify-center space-x-4">
              <Link href="/vote">
                <Button>Cast Your Vote</Button>
              </Link>
              <Button onClick={refreshResults} variant="outline">
                <RefreshCw className="mr-2 h-4 w-4" />
                Refresh Results
              </Button>
            </div>
          </Card>
        </div>
      </main>
    </div>
  )
}
