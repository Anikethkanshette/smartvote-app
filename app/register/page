"use client"

import type React from "react"
import { useState } from "react"
import { useRouter } from "next/navigation"
import Link from "next/link"
import { createUser, getUserByUsername, getUsers } from "@/lib/local-storage"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Vote, Lock, User, AlertCircle, CheckCircle, Loader2 } from "lucide-react"

export default function RegisterPage() {
  const [role, setRole] = useState<string>("voter")
  const [username, setUsername] = useState("")
  const [password, setPassword] = useState("")
  const [confirmPassword, setConfirmPassword] = useState("")
  const [prn, setPrn] = useState("")
  const [branch, setBranch] = useState("")
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState("")
  const [success, setSuccess] = useState("")
  const router = useRouter()

  const validateForm = () => {
    if (!username.trim() || !password || !prn.trim() || !branch.trim()) {
      setError("All fields are required!")
      return false
    }

    if (username.trim().length < 3) {
      setError("Username must be at least 3 characters long.")
      return false
    }

    if (password !== confirmPassword) {
      setError("Passwords do not match.")
      return false
    }

    if (password.length < 6) {
      setError("Password must be at least 6 characters long.")
      return false
    }

    if (!/^\d{14,15}$/.test(prn.trim())) {
      setError("PRN number must be 14 or 15 digits.")
      return false
    }

    if (branch.trim().length < 2) {
      setError("Please enter a valid branch name.")
      return false
    }

    return true
  }

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError("")
    setSuccess("")

    if (!validateForm()) {
      setLoading(false)
      return
    }

    try {
      // Check if username already exists
      const existingUser = getUserByUsername(username.trim())
      if (existingUser) {
        setError("Username already taken. Please choose another.")
        setLoading(false)
        return
      }

      // Check if PRN already exists
      const users = getUsers()
      const existingPRN = users.find((user) => user.prn === prn.trim())
      if (existingPRN) {
        setError("PRN number already registered. Please contact administrator if this is an error.")
        setLoading(false)
        return
      }

      // Create new user
      const newUser = createUser({
        username: username.trim().toLowerCase(),
        email: `${username.trim().toLowerCase()}@smartvote.com`,
        role: role as any,
        prn: prn.trim(),
        branch: branch.trim().toUpperCase(),
        approved: role === "voter", // Only auto-approve voters, candidates and admins need approval
      })

      setSuccess("Registration successful! Redirecting to login...")
      setTimeout(() => {
        router.push("/login")
      }, 2000)
    } catch (error: any) {
      console.error("Registration error:", error)
      setError("Registration failed. Please try again.")
      setLoading(false)
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4">
      <div className="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg%20width%3D%2260%22%20height%3D%2260%22%20viewBox%3D%220%200%2060%2060%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%3E%3Cg%20fill%3D%22none%22%20fillRule%3D%22evenodd%22%3E%3Cg%20fill%3D%22%239C92AC%22%20fillOpacity%3D%220.1%22%3E%3Ccircle%20cx%3D%2230%22%20cy%3D%2230%22%20r%3D%224%22/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] opacity-20"></div>

      <Card className="w-full max-w-md bg-white/10 backdrop-blur-lg border-white/20 shadow-2xl">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            <div className="p-3 bg-purple-600 rounded-full">
              <Vote className="h-8 w-8 text-white" />
            </div>
          </div>
          <CardTitle className="text-2xl font-bold text-white">Create Account</CardTitle>
          <CardDescription className="text-gray-300">Join the SmartVote election system</CardDescription>
        </CardHeader>

        <CardContent className="space-y-6">
          <form onSubmit={handleRegister} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="role" className="text-white">
                Role
              </Label>
              <Select value={role} onValueChange={setRole}>
                <SelectTrigger className="bg-white/10 border-white/20 text-white">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="voter">Voter</SelectItem>
                  <SelectItem value="candidate">Candidate</SelectItem>
                  <SelectItem value="admin">Admin</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="username" className="text-white">
                Username
              </Label>
              <div className="relative">
                <User className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="username"
                  type="text"
                  placeholder="Enter username"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className="pl-10 bg-white/10 border-white/20 text-white placeholder:text-gray-400"
                  required
                  disabled={loading}
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="password" className="text-white">
                Password
              </Label>
              <div className="relative">
                <Lock className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="password"
                  type="password"
                  placeholder="Enter password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className="pl-10 bg-white/10 border-white/20 text-white placeholder:text-gray-400"
                  required
                  disabled={loading}
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="confirmPassword" className="text-white">
                Confirm Password
              </Label>
              <div className="relative">
                <Lock className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                <Input
                  id="confirmPassword"
                  type="password"
                  placeholder="Confirm password"
                  value={confirmPassword}
                  onChange={(e) => setConfirmPassword(e.target.value)}
                  className="pl-10 bg-white/10 border-white/20 text-white placeholder:text-gray-400"
                  required
                  disabled={loading}
                />
              </div>
            </div>

            <div className="space-y-2">
              <Label htmlFor="prn" className="text-white">
                PRN Number
              </Label>
              <Input
                id="prn"
                type="text"
                placeholder="14 or 15 digit PRN"
                value={prn}
                onChange={(e) => setPrn(e.target.value.replace(/\D/g, ""))}
                className="bg-white/10 border-white/20 text-white placeholder:text-gray-400"
                required
                disabled={loading}
                maxLength={15}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="branch" className="text-white">
                Branch
              </Label>
              <Input
                id="branch"
                type="text"
                placeholder="e.g., CSE, ECE, MECH"
                value={branch}
                onChange={(e) => setBranch(e.target.value)}
                className="bg-white/10 border-white/20 text-white placeholder:text-gray-400"
                required
                disabled={loading}
              />
            </div>

            {error && (
              <Alert className="bg-red-500/10 border-red-500/20">
                <AlertCircle className="h-4 w-4 text-red-400" />
                <AlertDescription className="text-red-400">{error}</AlertDescription>
              </Alert>
            )}

            {success && (
              <Alert className="bg-green-500/10 border-green-500/20">
                <CheckCircle className="h-4 w-4 text-green-400" />
                <AlertDescription className="text-green-400">{success}</AlertDescription>
              </Alert>
            )}

            <Button type="submit" className="w-full bg-purple-600 hover:bg-purple-700" disabled={loading}>
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Creating Account...
                </>
              ) : (
                "Create Account"
              )}
            </Button>
          </form>

          <div className="text-center">
            <Link href="/login" className="text-purple-400 hover:text-purple-300 text-sm underline">
              Already have an account? Sign in here
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
